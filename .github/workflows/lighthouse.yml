name: Lighthouse Performance Check
on:
  push: # Trigger on push events
    branches:
      - main # Only run on the main branch (adjust as needed)
  pull_request: # Trigger on pull request events
    branches:
      - main # Only run on pull requests to the main branch (adjust as needed)
  schedule: # Trigger on a schedule
    - cron: "*/15 * * * *" # Run every 15 minutes
  workflow_dispatch: # Allow manual trigger

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install Lighthouse
        run: npm install -g lighthouse

      - name: Run Lighthouse Audits
        # continue-on-error: true # Allow this step to continue even if it fails
        run: |
          mkdir reports
          alert_needed=false
          websites=( "https://himalayanflavor.onlineorder.site" "https://himalayanflavor.onlineorder.site/store/18911/Himalayan Flavor - Logan" "https://joshandjohns.onlineorder.site" )
          for site in "${websites[@]}"; do
            echo "Running Lighthouse audit for $site"
            site_name=$(echo $site | sed 's|https://||g' | sed 's|/|_|g' | sed 's| |-|g')  # Sanitize the site name
            echo $site_name
            lighthouse "$site" \
              --chrome-flags="--headless --no-sandbox" \
              --output json \
              --output html \
              --output-path="reports/$site_name.report" \
              --form-factor=desktop \
              --screen-emulation.disabled=true  # Disables mobile screen emulation for desktop test
            
            ls reports

            # Check the JSON result for TTI
            json_report_path="reports/$site_name.report.report.json"
            if [ -f "$json_report_path" ]; then
              load_time=$(cat "$json_report_path" | jq '.audits["interactive"].numericValue')

              # Convert milliseconds to seconds
              load_time_in_seconds=$(echo "$load_time / 1000" | bc -l)

              echo "reports/$site_name.report.html"
              echo "${load_time_in_seconds}"
              
              # Append load time to the HTML report
              echo "<p>Load Time: ${load_time_in_seconds}s</p>" >> "reports/$site_name.report.html"
              
              
              if (( $(echo "$load_time_in_seconds > 10" | bc -l) )); then
                echo "❌ $site took more than 10 seconds to fully load: ${load_time_in_seconds}s"
                alert_needed=true  # Set flag to true if any load time exceeds 10 seconds
                
              else
                echo "✅ $site loaded in ${load_time_in_seconds}s"
              fi
            else
              echo "⚠️ JSON report for $site not found at $json_report_path"
            fi
          done
          echo ${alert_needed}
          echo "alert_needed=$alert_needed" >> $GITHUB_ENV  # Export as environment variable

          # Exit with status 1 if alert_needed is true
          if [ "$alert_needed" = true ]; then
            echo "One or more sites exceeded the 10s load time threshold. Exiting with status 1."
          fi
        shell: bash

      - name: Upload Report as Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: reports/

      - name: Send Slack Notification
        if: env.alert_needed == 'true'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          REPO_NAME: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
        run: |
          # Construct artifact URL
          artifact_url="https://github.com/$REPO_NAME/actions/runs/$RUN_ID"

          # Send notification with artifact link
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "Lighthouse audit completed. :mag: Reports are available [here]('"$artifact_url"')."
          }' https://hooks.slack.com/services/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
          exit 1
